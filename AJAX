# AJAX

AJAX是什么？AJAX是 Asynchronous JavaScript And XML, 是一个技术，不是一门编程语言。AJAX是基于浏览器内置`XMLHttpRequest`对象和JavaScript以及HTML DOM，AJAX允许网页在场景内用一个网络服务交换数据来异步更新，这也是为什么可以不重新加载就可以更新。   


可以干什么？
1. 无须重新加载就更新网页
2. 从服务器请求数据
3. 从服务器接收数据
4. 在后台发送数据

## Apache

本地配置服务器, Mac自带了`Apache`服务，10.8.3之后可以通过命令行打开终端，输入`sudo apachectl start`即可打开。

## XMLHttpRequest
AJAX的关键就是`XMLHttpRequest`对象，所有最新的浏览器都支持`XMLHttpRequest`对象。(IE7.0之前的不支持)

### 创建XMLHttpRequest对象

```js
var variable = new XMLHttpRequest();

// 旧版本的IE可以使用ActiveX对象
// var obj = new ActiveObject("Microsoft.XMLHTTP");
```  
出于安全性，最新的浏览器不允许获取跨越域名。

### XMLHttpRequest方法

|方法|功能|  
|:---|:---|
|new XMLHttpRequest()| 创建一个新的XMLHttpRequest对象|
|abort()|取消当前的请求|
|getAllResponseHeaders()|返回全部头部信息|
|getResponseHeader()|返回明确的头部信息|
|open(method, url, async, user, psw)| 单个请求 method：请求方式GET或POST  url: 文件路径 async: true 或 false user： 用户名 可选值 psw：密码 可选值|
|send()|发送请求 用于GET请求|
|send(string)|用于POST请求|
|setRequestHeader()|添加键值对|  

### Server Response

|属性|描述|
|:|:|
|onreadystatechange|定义一个函数当readyState发生改变的时候|
|readyState|XMLHttpRequest状态|
|responseText|以字符串的形式返回响应数据|
|responseXML|以XML形式返回响应数据|
|status|请求状态码|
|statusText|状态描述语|    

readyState状态表

|状态码|描述|
|:--:|:|  
|0|请求没有初始化|
|1|服务连接已建立|
|2|请求已被接收|
|3|处理请求|
|4|请求结束，响应已就绪|

status描述：

|状态码|描述|
|:--:|:|
|200|成功 "OK"|
|403|禁止 "Forbidden"|
|404|页面未找到 "Page not found"|  

#### Server Response Properties

|Property|Description|
|:|:|
|responseText|以字符串的形式获取响应数据|
|responseXML|以XML的形式获取响应数据|  

#### Server Response Methods
|Method|Description|
|:|:|
|getResponseHeader()|从服务器资源里面返回明确的头部信息|
|getAllResponseHeaders()|返回所有的头部信息|

# JSON

## 简介

`JSON`(JavaScript Object Nonation) 是一种存储和交换数据的语法，**不是语言**，`JSON`是`JavaScript Object
 Nonation`格式的字符串。

### 交换数据 Exchange Data

浏览器与服务器之间交换数据只能以字符串的形式进行交换。可以将`JavaScript`对象转化为`JSON`，并将`JSON`发送给服务器。同时也可以将从服务器接收到的`JSON`转化为`JavaScript`对象。

## 语法

`JSON`语法是`JavaScript`语法的子集。
语法：
* 键值对形式 key:value **`JSON`key必须使用`""`包含起来**
* 使用`,`分离
* `{}`代表对象
* `[]`代表数组
* `JSON`里面value类型只能是 String number Object array boolean null
* `JSON`里面字符串只能使用`""`

## 与XML比较

相同点：
* 可读性强
* 分等级的
* 大部分语言可以解析并使用
* 可以结合`XMLHttpRequest`使用

不同点：
* `JSON`不需要使用结束标签
* `JSON`更短
* `JSON`可以使用数组
* `JSON`读写更快
* `XML`需要解析器解析，`JSON`可以直接被解析

## 解析

### parse()

将`JSON`转化为`JavaScript`
> 这里依据`JSON`数据类型，如果是数组的话，使用parse()解析将返回`JavaScript`数组

### stringify()

将`JavaScript`转化为`JSON`

## JSONP

跨域请求
