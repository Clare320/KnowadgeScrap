## Swift中闭包强循环问题

闭包是引用类型，导致可能会出现强引用循环。

出现强引用的情况：
  闭包作为类的对象属性，在闭包体里面又使用类的其它对象属性。这时候就会导致类的对象强持有闭包属性，闭包又捕获到类的对象进而强持有类对象，形成强循环。

解决方法：**定义捕获数组**
> 在Swift里面闭包里面使用`self.someProperty`或`self.someFunc()`来代替`someProperty`或`someFunc()`，这样可以提醒你捕获到self

在捕获数组中元素是成对出现的，格式为`weak`或`unowned`开头+已经声明的类的对象或其它地方已声明的变量，这些元素用`[]`包围，多个元素用`,`隔开，放在参数数组之前。

Weak Refrence 弱引用

  使用场景：当捕获的对象可能在未来的某个点变为`nil`。弱引用总是一个可变类型，并且在对象被释放后置为`nil`。这样可以在闭包体里面判断当前对象是否存在。

  > 如果捕获到的引用无法变为nil，它应该总是是一个无主引用关系而不应是一个弱引用。

Unowned Refrence 无主引用

  使用场景： 当闭包和它所捕获的类的对象总是相互指向对方，并且也总是在同一个时间点释放。

## Object-C中Block强循环问题
