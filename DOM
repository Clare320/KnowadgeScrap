

DOM 是什么？
  Document Object Model，文档对象模型，以树状结构形式构成。树是由节点构成的，通过序可以找到树里面的任何节点。
  * JS可以获取节点，改变节点的属性，响应节点的事件，改变CSS样式
  * JS增删节点，增删节点事件

## DOM操作
### 获取节点
javascript大部分情况都是用来处理节点。首先要获取节点：

* 通过`id`获取节点  `var ele = document.getElementById("id");` 这里如果在树里面找到这个节点 直接返回节点，发生错误的话 返回null
* 通过标签名返回 `var eles = document.getElementsByTagName("p");`获取所有的`<p>`元素>。
* 通过类名查找 `var x = document.getElementsByClassName("intro");` **在IE8及之前不起作用。**。
* 通过`CSS Selectors`查找，`var x = document.querySelectorAll("p.intro");`。返回所有`<p>`标签中clas属性为`intro`的元素组。**在IE8及之前不起作用。**
* 通过`HTML Object Collections`查找，查找表单元素，返回一个集合。`var x = document.forms["frm1"];`查找所有id为frm1的表单元素。

### 操作节点

  1. `visibility`来控制节点是否显示。
  2. 获取到节点之后 改变节点的style 和 attribute。
  3. 动画条件
    * 所有的动画都是相对于容器元素
    * 容器元素的位置必须是相对的，动画执行体必须是绝对的。
    * 渐变元素的属性构成动画
  4. 给元素节点绑定事件
    ```js
    // test 是一个函数
    document.getElementById("demo").onclick = test;
    ```
  5. `onload`和`onunload`事件
    * `onload`事件在用户进入网页的时候被触发，常被用来检查浏览器类型和版本，根据这个信息来加载网页的正确版本。
    * `onunload`事件在离开的时候触发，
    > 这两个事件可以用来处理cookies。

  6. `onchange`事件 常用于输入组件处理
  7. `onmouseover` 和 `onmouseout`事件处理，
  8. 点击事件触发3步
      * 鼠标按下 触发`onmousedown`
      * 鼠标弹起 触发`onmouseup`
      * 点击完成后 触发`onclick`
  9. `onmouseover` 和 `onmouseout` 通常用于当用户按下按钮的时候改变按钮的图片  
    `onload`在网页加载结束的时候显示一个提示框  
    `onfocus`改变输入框的背景颜色  
    `Mouse Event`通常用于当鼠标覆盖在元素上面的时候改变其颜色  

### 节点事件监听
* `addEventById()`方法将事件处理依附于一个明确的元素，不会重写已经存在的事件响应。
* 一个元素可以添加多个事件响应。可以是同一触发条件。
* 任何元素节点都可以添加事件监听
* 可以方便处理 使用`removeEventListener()`。
* 如果使用了`on`关键字设置了这个事件响应函数，那么先响应这个函数， 再响应添加的时间。  
* 如果需要传递参数时，使用无名函数，在无名函数里调用明确的参数，并传递具体的参数。  

语法：
```js
/**
@param event 事件类型
@param function 事件发生时响应的函数
@param useCapture boolean值 可选值 明确是否使用事件冒泡或事件捕获
Note： 事件类型不需要添加on的前缀
*/
element.addEventListener(event, function, useCapture);
```
> 除了IE9.0与Opera7.0之前的 现在所有的浏览器都支持 在这之前的需要使用`attachEvent()`和`detachEvent()`来增加和移除事件监听。

**NOTE:**
除了通过id方式获取节点都返回一个node list，它不是数组，可以通过`length`获取节点个数，可以使用`for in`循环list，但是不能使用数组方法。  

## BOM
BOM ： Brower Object Model（非官方标准 现在大部分浏览器已经支持）

* `window`对象，浏览器的视图层。
    * `innerHeight` px值
    * `innerWidth`  px值
  > `window`不包括工具栏和滚动栏。对于IE8及之下版本的 使用`documentElement.clientHeight`和`documentElement.clientWidth` 或者 `body.clientHeight`和`body.clientWidth`。

* `screen`对象，其实是`window.screen`对象，在使用的时候可以不带`window`前缀。
    * 获取屏幕的宽高， 返回访客屏幕的宽高。与window的innerWidth和innerHeight获取的是浏览器的宽高。
    * `availWidth` `availHeight` 屏幕宽高 - 屏幕的任务栏高度
    * `colorDepth` 返回显示颜色的位数 （24位 或者 32位）
    * `pixelDepth`  一般情况跟`colorDepth`相同  

* `Location`对象，用于获取当前页的地址（URL），浏览器的重定向。  
    * `href` 当前页的网址
    * `hostname` 网络服务器域名
    * `pathname` 当前页的路径和文件名
    * `protocol` 返回当前页遵守的协议（http https）
    * `assign` 加载新的文档
